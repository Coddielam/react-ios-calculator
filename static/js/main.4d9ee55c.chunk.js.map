{"version":3,"sources":["index.js"],"names":["Calculator","props","state","lastDisplay","changeSreen","sign","dot","firstNumber","operand","secondNumber","number","screenNumberLength","document","getElementById","innerText","split","filter","e","length","screenDisplay","this","String","localeString","join","Number","toLocaleString","console","log","setState","equation","answer","eval","displayNumber","Math","newNumber","percent","id","Screen","display","Keyboard","React","Component","Button","className","onClick","text","clearLastNumber","plusMinus","toPercentage","operate","inputNumber","evaluateEquation","ReactDOM","render"],"mappings":"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","file":"static/js/main.4d9ee55c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lastDisplay: 0,\n      changeSreen: true,\n      sign: \"\",\n      dot: \"\",\n      // making a formula\n      firstNumber: null,\n      operand: null,\n      secondNumber: null,\n    };\n  }\n\n  inputNumber(number) {\n    let screenNumberLength = document\n      .getElementById(\"screen\")\n      .innerText.split(\"\");\n    screenNumberLength = screenNumberLength.filter((e) => {\n      return e !== \",\" && e !== \".\";\n    }).length;\n    if (screenNumberLength <= 8) {\n      // changing the screen\n      let screenDisplay = this.state.changeSreen\n        ? this.state.sign + number\n        : this.state.sign +\n          document.getElementById(\"screen\").innerText +\n          String(number);\n      screenDisplay = screenDisplay.split(\"\");\n      screenDisplay = screenDisplay.filter((e) => {\n        return e !== \",\";\n      });\n      // convert to localestring\n      screenDisplay = screenDisplay.join(\"\");\n      screenDisplay = screenDisplay.split(\".\");\n\n      let localeString =\n        screenDisplay.length > 1\n          ? String(Number(screenDisplay[0]).toLocaleString()) +\n            String(\".\") +\n            screenDisplay[1].toLocaleString()\n          : Number(screenDisplay[0]).toLocaleString();\n\n      document.getElementById(\"screen\").innerText = localeString;\n\n      // updating a formula\n      screenDisplay =\n        screenDisplay.length > 1\n          ? screenDisplay[0] + \".\" + screenDisplay[1]\n          : screenDisplay[0];\n      console.log(screenDisplay);\n\n      if (this.state.operand === null) {\n        this.setState({\n          firstNumber: screenDisplay,\n          changeSreen: false,\n          sign: \"\",\n        });\n      } else if (this.state.operand !== null) {\n        this.setState({\n          secondNumber: screenDisplay,\n          changeSreen: false,\n          sign: \"\",\n        });\n      }\n    } else if (this.state.operand !== null) {\n      this.setState({ changeSreen: true });\n      document.getElementById(\"screen\").innerText = number;\n    }\n  }\n\n  operate(operand) {\n    let equation =\n      this.state.firstNumber + this.state.operand + this.state.secondNumber;\n    // if it formulates an equation already, computes it and store it in the first number\n    if (\n      this.state.firstNumber !== null &&\n      this.state.operand !== null &&\n      this.state.secondNumber !== null\n    ) {\n      let answer = eval(equation);\n      document.getElementById(\"screen\").innerText = Number(\n        answer\n      ).toLocaleString();\n      this.setState({\n        firstNumber: answer,\n        secondNumber: null,\n        changeSreen: true,\n      });\n    }\n    this.setState({ changeSreen: true, operand: operand });\n  }\n\n  clearLastNumber() {\n    // set the last element to be null\n    // change the screen to display 0\n    if (this.state.secondNumber !== null) {\n      this.setState({ secondNumber: null, changeSreen: true });\n    } else if (this.state.operand !== null) {\n      this.setState({ operand: null, changeSreen: true });\n    } else if (this.state.firstNumber !== null) {\n      this.setState({ firstNumber: null, changeSreen: true });\n    }\n    document.getElementById(\"screen\").innerText = 0;\n  }\n\n  plusMinus() {\n    // changing the display\n    // getting the display value that is in localeString and convert it back to number string\n    let displayNumber = document.getElementById(\"screen\").innerText.split(\"\");\n    displayNumber = displayNumber\n      .filter((e) => {\n        return e !== \",\";\n      })\n      .join(\"\");\n    // evaluating the sign\n    if (Math.sign(displayNumber) === 0 || Math.sign(displayNumber) === 1) {\n      document.getElementById(\"screen\").innerText =\n        \"-\" + document.getElementById(\"screen\").innerText;\n    } else if (Math.sign(displayNumber) === -1) {\n      document.getElementById(\"screen\").innerText = Number(\n        displayNumber * -1\n      ).toLocaleString();\n    }\n    // updating the equation -- updating the last number\n    let newNumber = document.getElementById(\"screen\").innerText;\n    if (this.state.secondNumber !== null) {\n      this.setState({\n        secondNumber: newNumber[0] + displayNumber,\n        changeSreen: true,\n      });\n      document.getElementById(\"screen\").innerText = Number(\n        -1 * displayNumber\n      ).toLocaleString();\n    } else if (this.state.operand !== null) {\n      this.setState({\n        secondNumber: 0,\n        changeSreen: true,\n        sign: newNumber[0],\n      });\n      document.getElementById(\"screen\").innerText = newNumber[0] + 0;\n    } else if (this.state.firstNumber !== null) {\n      this.setState({\n        firstNumber: newNumber[0] + displayNumber,\n        changeSreen: true,\n      });\n    }\n  }\n\n  toPercentage() {\n    // first number though, change to percentage format\n    let screenDisplay = document.getElementById(\"screen\").innerText.split(\"\");\n    screenDisplay = screenDisplay\n      .filter((e) => {\n        return e !== \",\";\n      })\n      .join(\"\");\n    if (this.state.firstNumber !== null && this.state.operand === null) {\n      let percent = screenDisplay / 100;\n      // change the screen\n      document.getElementById(\"screen\").innerText = percent;\n      // change the equation\n      this.setState({ firstNumber: percent });\n    } else if (this.state.operand !== null) {\n      let percent = eval(this.state.firstNumber * (screenDisplay / 100));\n      document.getElementById(\"screen\").innerText = percent;\n      this.setState({ secondNumber: percent });\n    }\n    // percentage of the first number\n  }\n\n  evaluateEquation() {\n    let screenDisplay = document.getElementById(\"screen\").innerText;\n    screenDisplay = screenDisplay.split(\"\");\n    screenDisplay = screenDisplay\n      .filter((e) => {\n        return e !== \",\";\n      })\n      .join(\"\");\n\n    console.log(\n      this.state.firstNumber + this.state.operand + Number(screenDisplay)\n    );\n    if (this.state.operand) {\n      let answer = eval(\n        String(this.state.firstNumber) +\n          this.state.operand +\n          Number(screenDisplay)\n      );\n      document.getElementById(\"screen\").innerText = Number(\n        answer\n      ).toLocaleString();\n      this.setState({ firstNumber: answer, secondNumber: null });\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        <Screen display={this.state.lastDisplay} />\n        <Keyboard />\n      </div>\n    );\n  }\n}\n// ================================================= Screen =================================================\nclass Screen extends React.Component {\n  render() {\n    return <div id=\"screen\">{this.props.display}</div>;\n  }\n}\n// ================================================= Keyboard =================================================\nclass Button extends Calculator {\n  render() {\n    return (\n      <button\n        className={this.props.className}\n        id={this.props.id}\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.text}\n      </button>\n    );\n  }\n}\n\nclass Keyboard extends Calculator {\n  // did not have a constructor that inherits the properties but somehow is able to access the function in the parent class?\n  render() {\n    return (\n      <div id=\"keyboard\">\n        <Button\n          text={this.state.firstNumber ? \"C\" : \"AC\"}\n          id=\"AC-key\"\n          className=\"function-key\"\n          onClick={() => this.clearLastNumber()}\n        />\n        <Button\n          text=\"+/-\"\n          className=\"function-key\"\n          onClick={() => this.plusMinus(-1)}\n        />\n        <Button\n          text=\"%\"\n          className=\"function-key\"\n          onClick={() => this.toPercentage()}\n        />\n        <Button\n          text=\"÷\"\n          className=\"operand-key\"\n          onClick={() => this.operate(\"/\")}\n        />\n\n        <Button text=\"7\" onClick={() => this.inputNumber(7)} />\n        <Button text=\"8\" onClick={() => this.inputNumber(8)} />\n        <Button text=\"9\" onClick={() => this.inputNumber(9)} />\n        <Button\n          text=\"×\"\n          className=\"operand-key\"\n          onClick={() => this.operate(\"*\")}\n        />\n\n        <Button text=\"4\" onClick={() => this.inputNumber(4)} />\n        <Button text=\"5\" onClick={() => this.inputNumber(5)} />\n        <Button text=\"6\" onClick={() => this.inputNumber(6)} />\n        <Button\n          text=\"-\"\n          className=\"operand-key\"\n          onClick={() => this.operate(\"-\")}\n        />\n\n        <Button text=\"1\" onClick={() => this.inputNumber(1)} />\n        <Button text=\"2\" onClick={() => this.inputNumber(2)} />\n        <Button text=\"3\" onClick={() => this.inputNumber(3)} />\n        <Button\n          text=\"+\"\n          className=\"operand-key\"\n          onClick={() => this.operate(\"+\")}\n        />\n\n        <Button text=\"0\" id=\"button-0\" onClick={() => this.inputNumber(0)} />\n        <Button text=\".\" onClick={() => this.inputNumber(\".\")} />\n        <Button\n          text=\"=\"\n          className=\"operand-key\"\n          onClick={() => this.evaluateEquation()}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}